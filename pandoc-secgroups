#!/usr/bin/python3
#
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2019 Alberto Pianon <pianon@array.eu>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

import panflute as pf

sec_group = {}
sec_group_cite = {}

def prepare(doc):
    global sec_group
    global sec_group_cite
    sec_group_tags = doc.get_metadata('secGroupTags')
    if sec_group_tags: # FIXME: add control isinstance
        if isinstance(sec_group_tags, list):
            for tag in sec_group_tags:
                sec_group[tag] = []
                sec_group_cite[tag] = [] # there may be multiple citations
        elif isinstance(sec_group_tags, str):
            tag = sec_group_tags
            sec_group[tag] = []
            sec_group_cite[tag] = []
            

def action(elem, doc):
    global sec_group
    global sec_group_cite
    if not sec_group:
        return None # leave element unchanged
    s = pf.stringify(elem)
    if isinstance(elem, pf.Header):
        for tag in sec_group:
            if elem.attributes.get(tag):
                sec_group[tag].append({
                    'id': elem.identifier,
                    'title': s
                })
    elif isinstance(elem,pf.Cite) and s[1:] and s[1:] in sec_group_cite:
        tag = s[1:]
        new_elem = pf.Span() 
        # we put an empty span elem here, we will fill it later in finalize
        sec_group_cite[tag].append(new_elem)
        return new_elem

def finalize(doc):
    global sec_group
    global sec_group_cite
    if not sec_group:
        return
    for tag in sec_group_cite:
        citation_list = [
            "@{} ({})".format(sec['id'], sec['title'])
            for sec in sec_group[tag] 
        ]
        citation_list_str = ", ".join(citation_list)
        citation_list_pandoc = pf.convert_text(citation_list_str)
        # convert_text returns a Para obj,
        # we copy its content in the Span obj created above
        for elem in sec_group_cite[tag]:
            elem.content = citation_list_pandoc[0].content

if __name__ == '__main__':
    pf.toJSONFilter(action, prepare=prepare, finalize=finalize)
